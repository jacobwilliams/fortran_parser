*********************************************************************

This software is provided AS IS with NO WARRANTY.

*********************************************************************


Hi Fortran Programmers

OK, the function interpreter is now finished (at least to a level that
satisfies me).

PLEASE, this code comes AS IS without any warranty of any kind.  I have
developed this code enough to satisfy my own needs and no body elses. 
If you find a use for it, well and good.  If you manage to improve on
it, please me know and I will put the improvements in my own code.

There are two modules and one program (test).

The interpreter does 16 functions 

    'cos'
    'sin'
    'tan'
    'exp'
    'log'
    'log10'
    'sqrt'
    'acos'
    'asin'
    'atan'
    'cosh'
    'sinh'
    'tanh'
    'anint'
    'aint'
    'abs'

15 operators

    '+'
    '-'
    '*'
    '/'
    '**'
    '^'
    '='
    '=='
    '!='
    '>'
    '<'
    '=>'
    '>='
    '=<'
    '<='

brackets and correct order of operation.

****  THE CODE NOW HAS ERROR DETECTION  ****

Yes, I got around to adding it at the request of a user of my code.
Basically, the code will try to detect when an illegal function is
entered.  It is quite basic, but seems to work quite well.

Basically, when calling the function, you have the option of
including an error field ( character(len=#)::error ).  If no error
occurs, this error field will contain OK.  If an error is detected
then error will contain the first # chacters of the error explanation.

It will still return a valid number (that obtained previously) but you
can at least have some primitive idea of what went wrong.

********************************************

Numbers are all assumed to be double precision real and are entered in
the usual fortran double precision way (or any way that read(*,*) num
will interpret)  - # = integer

	#
	.#
	#.#
	#.#d#
	#.#d-#
	#.#d+#
	#.#e#
	#.#e-#

etc...

The functions are simply strings with any number of possible variables

the main program is

	f_evaluatefn(string, varstring, varvalues, error)

where: string is the function; varstring is a space seperated list of the
variables to use; varvalues is a real vector of the variable values; and
error is an OPTIONAL character string ( character(len=#) ) that will
possible report when an error occurs.

It is fairly trivial to add more variables and it would be quite easy to
add an infinite number of variables (I personally only need two
variables).

Anyway, the code isn't documented, though it should be really easy to
follow.



KNOWN PROBLEMS

No known problems.


If you have any problems, let me know.

Stu.


